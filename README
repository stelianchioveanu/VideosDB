================================================================================
----------------- Copyright Chioveanu Stelian-Ovidiu 2021-2022 -----------------
================================================================================

============================ POO-TEMA-VIDEOSDB =================================

Noiembrie 2021
https://ocw.cs.pub.ro/courses/poo-ca-cd/teme/tema

================================ DESCRIERE =====================================

        Tema consta in constuirea unui database ce are in componenta hashmap-uri
cu utilizatori, filme, seriale, genuri, actori si actiuni. Pentru acestea din
urma vor fi apelate metode ce modifica database-ul sau extrag diferite informa-
tii din acesta.

================================ COMPONENTA ====================================

------------------------------ PACKAGE - MAIN ----------------------------------
    - clasa "Main": in acesta clasa sunt citite din fisiere datele si introduse
in intr-un obiect de tip "Input"; contine o metoda start care creeaza un
repository si rezolva comenzile.
    - clasa "Test": clasa citeste datele din fisierul primit in terminal si ape-
leaza metota "start" din clasa "Main".
--------------------------- PACKAGE - REPOSITORY -------------------------------
    - clasa "Repository": numarul de instantieri ale unei clase este restrictio-
nat la un singur obiect fiind utilizat un Singleton Pattern(Lazy instantiation).
Acest obiect este chiar database-ul regasit in "Main". Clasa contine o metoda
"entryPoint" apelata in "Main" prin care sunt introduse datele in database, o
metoda "populateRepository" care introduce datele in database, o metoda
"clearRepository" care goleste database-ul(deoarece programul nu se opreste la
trecerea de la un fisier input la altul suntem nevoiti sa golim si sa umplem
database-ul de fiecare data) si o metoda "switchCasesAction" care creeaza obiec-
te de tip ("Command", "Query", :Recommendation") si apeleaza metoda corespunza-
toare fiecarei actiuni.
------------------------------ PACKAGE - USER ----------------------------------
    - clasa "User": contine informatiile unui utilizator ce sunt primite din
input sau calculate pe parcurs.
-------------------------- PACKAGE - ENTERTAINMENT -----------------------------
    - clasa "Movie": contine informatiile unui film ce sunt primite din input
sau calculate pe parcurs. Acesta clasa mosteneste clasa "Video".
    - clasa "Serial": contine informatiile unui serial ce sunt primite din input
sau calculate pe parcurs. Acesta clasa mosteneste clasa "Video".
    - clasa "Video": contine informatiile unui video ce sunt primite din input
sau calculate pe parcurs.
------------------------------ PACKAGE - ACTOR ---------------------------------
    - clasa "Actor": contine informatiile unui user ce sunt primite din input
sau calculate pe parcurs.
------------------------------ PACKAGE - COMMON --------------------------------
    - clasa "Action": contine informatiile unei actiuni ce sunt primite din
input.
    - clasa "ArrayBuilder": contine o metoda corespunzatoare query-urilor video-
clipurilor. Aceasta formeaza un array de videoclipuri in functie de parametrul
de diferentiere(numarul de vizinari, durata, rating, numar de aparitii la favo-
rite).
    - clasa "Output": contine metode corespunzatoare query-urilor. Acestea for-
meaza un output de tip "String" ce va contine numarul de date corespunzator nu-
marului primit in actiune, sau unul mai mic, dupa caz.
    - clasa "Constants": contine constante.
----------------------------- PACKAGE - COMMANDS -------------------------------
    - clasa "Command": contine metode de tip "COMMAND":
        a) view : metoda verifica existenta videoclipului primit ca parametru
prin "action" in istoricul utilizatorului. In caz afirmativ creste numarul de
vizionari. In caz negativ adauga videoclipul in istoric;
        b) favorite : metoda verifica existenta videoclipului primit ca parame-
tru prin "action" in istoricul utilizatorului. In caz afirmativ il adauga in
lista de favorite si incrementeaza numarul de aparitii la favorite al acestuia.
In caz negativ afiseaza mesajul  corespunzator;
        c) rating : metoda verifica existenta videoclipului primit ca parame-
tru prin "action" in istoricul utilizatorului. In caz afirmativ il adauga in
lista de filme/seriale evaluate si ii recalculeaza rating-ul final. In caz ne-
gativ afiseaza mesajul  corespunzator;
        d) ratingMovie : motoda este apelata in metoda rating in cazul filmului;
        e) ratingSerial : motoda este apelata in metoda rating in cazul serialu-
lui;
    - clasa "Query": contine metode de tip "QUERY":
        a) average : creeaza o lista de actori sortata dupa rating-ul acestora.
Apeleaza metoda "outputActorCommand";
        b) awards : creeaza o lista de actori sortata dupa numarul de premii.
Apeleaza metoda "outputActorCommand";
        c) filterDescription : creeaza o lista de actorii care contin anumite
keyword-uri in descrierea lor, sortata dupa numele acestora. Apeleaza metoda
"outputActorCommand";
        d) numberOfRatings : creeaza o lista de utilizatori sortata dupa numarul
de rating-uri date. Apeleaza metoda "outputUserCommand";
        e) mostViewed : creeaza o lista de videoclipuri sortata dupa numarul
de vizionari. Apeleaza metoda "outputVideoCommand" si "makeArray" din clasa
"ArrayBuilder";
        c) rating : creeaza o lista de videoclipuri sortata dupa rating.
Apeleaza metoda "outputVideoCommand" si "makeArray" din clasa
"ArrayBuilder";
        d) favorite : creeaza o lista de videoclipuri sortata dupa numarul
de aparitii la favorite. Apeleaza metoda "outputVideoCommand" si "makeArray" din
clasa "ArrayBuilder";
        e) longest : creeaza o lista de videoclipuri sortata dupa durata acesto-
ra. Apeleaza metoda "outputVideoCommand" si "makeArray" din clasa
"ArrayBuilder";
    - clasa "Recommendation": contine metode de tip "RECOMMENDATION":
        a) standard : returneaza numele primului video nevizualizat de utiliza-
tor;
        b) bestUnseen : returneaza numele primului video nevizualizat de utili-
zator cu cel mai bun rating;
        c) popularPremium : verifica tipul de abonament al utilizatorului. Daca
acesta are un abonament premium returneaza numele primului film nevizualizat ce
apartine celui mai popular gen;
        d) searchPremium : verifica tipul de abonament al utilizatorului. Daca
acesta are un abonament premium returneaza numele tuturor filmelor nevizualizate
dintr-un anumit gen.
        e) favoritePremium : verifica tipul de abonament al utilizatorului. Daca
acesta are un abonament premium returneaza numele filmului nevizualizat cel mai
regasit in listele de favorite.
================================================================================
--------------------------------------------------------------------------------
================================================================================